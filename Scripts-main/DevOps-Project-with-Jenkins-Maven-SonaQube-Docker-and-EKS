Video Link -- https://youtu.be/e42hIYkvxoQ
============================================================= Install and Configure the Jenkins-Master =============================================================
## Install Java
$ sudo apt update
$ sudo apt upgrade
$ sudo vi /etc/hostname
$ sudo init 6
$ sudo apt install openjdk-17-jre
$ java -version
$ sudo nano /etc/ssh/ssh_config or just navigate to file manuelly
$ cd /etc/ssh sudo vi ssh_config  manuelly
then uncomment 
#PubkeyAuthentication yes
PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys2
AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys2
then save and close
$ sudo service sshd reload or $ sudo systemctl restart ssh



## Install Jenkins
Refer--https://www.jenkins.io/doc/book/installing/linux/
curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins

$ sudo systemctl enable jenkins       //Enable the Jenkins service to start at boot
$ sudo systemctl start jenkins        //Start Jenkins as a service
$ systemctl status jenkins
$ sudo nano /etc/ssh/sshd_config
$ sudo systemctl restart ssh
$ ssh-keygen OR $ ssh-keygen -t ed25519
$ cd .ssh


============================================================= Install and Configure the Jenkins-Agent =============================================================
## Install and configure jenkins agent
$ sudo apt update
$ sudo apt upgrade
$ sudo vi /etc/hostname
$ sudo init 6   //reboot system
$ sudo apt install openjdk-17-jre
$ java -version
$ sudo apt-get install docker.io
$ sudo usermod -aG docker $USER  //add the current in group docker
$ sudo nano /etc/ssh/ssh_config or just navigate to file manuelly
$ cd /etc/ssh sudo vi ssh_config  manuelly
then uncomment 
#PubkeyAuthentication yes
PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys2
AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys2
then save and close
$  sudo service sshd reload or $ sudo systemctl restart ssh


## Install and configure jenkins dynamic agent with docker
============================================================= Install and Configure the Jenkins-dynamic docker agent =============================================================
Advantages of using Docker Containers as Jenkins Build Agents
Ephemeral 
Better resource utilization
Customized agents as it can run different builds like Java 8, Java 11 
Scalability 

Pre-requisites:
Jenkins Master is already setup and running
port 8080 opened in Jenkins EC2s firewall rule
Setup Docker host. Creating another EC2 instance is recommended to serve as a Docker Host. 
port 4243 opened in docker host machine 
32768 - 60999 opened in docker host machine 

## Install Docker
Install Docker Ubuntu | How to install Docker in Ubuntu 22.0.4 | Setup Docker on Ubuntu
$ sudo apt update
$ sudo apt-get install docker.io

Add Ubuntu user to Docker group
$ sudo usermod -aG docker $USER
$ sudo init 6  

We need to reload shell in order to have new group settings applied. Now you need to logout and log back in command line or execute the below command:
$ newgrp docker

The Docker service needs to be setup to run at startup. To do so, type in each command followed by enter:
$ sudo systemctl enable docker
$ sudo systemctl start docker
$ sudo systemctl status docker
$ docker --version

$ sudo docker run hello-world


Step 1 - Configure Docker Host with Remote API
$ sudo vi /lib/systemd/system/docker.service
look for this ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock

You can replace it with below line:
$ ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock

# If youre using Docker in a production environment, consider securing the Docker daemon with TLS to encrypt communication and authenticate clients. Ensure that only trusted entities have access to the Docker API

# Here's an example of how you can secure the Docker daemon with TLS:
$ ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/ca.pem --tlscert=/etc/docker/server-cert.pem --tlskey=/etc/docker/server-key.pem -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock


Restart Docker service
$ sudo systemctl daemon-reload
$ sudo service docker restart

Validate API by executing below curl command
$ curl http://localhost:4243/version

Step 2 - Build Jenkins slave Docker image
Download Dockerfile from repo.
git clone githubrepo; cd cloned repo

Build Docker image

$ sudo docker build -t cloned repo .
# Move the Dockerfile to the root directory
$ mv ~/jenkins-docker-slave/Dockerfile ~/Dockerfile

# Move the README.md to the root directory
$ mv ~/jenkins-docker-slave/README.md ~/README.md

<!-- how to delete docker images -->
# Delete the docker-slave image(image name)
$ sudo docker rmi docker-slave

# Delete the ubuntu:18.04 image
$ sudo docker rmi ubuntu:18.04

# Delete the hello-world image
$ sudo docker rmi hello-world

# Remove all Docker images
$ sudo docker rmi $(sudo docker images -q)

# Prune Unused Images: Use the Docker command to prune all unused images:
$ sudo docker image prune -a



Step 3 - Configure Jenkins Server with Docker plug-in
Now login to Jenkins Master. Make sure you install Docker plug-in in Jenkins.
## plugins to be installed

Now go to Manage Jenkins 
-> Configure Nodes Cloud and select docker
-> cloud name is docker container name
-> Click on Docker Cloud Details
-> Enter docker host dns name or ip address tcp://docker_host_dns:4243
-> Make sure Enabled is selected
-> Now click on Test Connection to make sure connecting with docker host is working. and it should return  Version = 24... API Version = 1...


Step 4 - Configure Docker Agent Templates
-> Now click on Docker Agent templates:
-> Enter label as "docker-slave" and give some name
-> Click on Enabled
-> Now enter the name of the docker image you have built previously in docker host.
-> enter /home/jenkins as Remote file system root

Choose Connect with SSH as connection method:
Enter SSH credentials per your Dockerfile - jenkins/password

choose Never Pull as pull strategy as we have already image stored in DockerHost.


============================================================= Install and Configure the nginx =============================================================
### Install Nginx Reverse Proxy for Jenkins¶
Nginx is one of the most popular web servers in the world and is responsible for hosting some of the largest and highest-traffic sites on the internet. It is a lightweight choice that can be used as either a web server or reverse proxy.

In this tutorial, you will configure Nginx as a reverse proxy to direct client requests to Jenkins.
Prerequsites

### Jenkins server already installed and running
Update Package Repository and Upgrade Packages¶
Run from shell prompt

$ sudo apt update
$ sudo apt upgrade

### Installing Nginx¶
Run from shell prompt

$ sudo apt install nginx

## Checking your Web Server¶
We can check with the systemd init system to make sure the service is running by typing:

## Run from shell prompt
$ systemctl status nginx


## In order for Nginx to serve this content, it’s necessary to create a server block with the correct directives.

## Run from shell prompt (replace your domain)
$ sudo vi /etc/nginx/sites-available/your-domain

## Paste in the following configuration block, which is similar to the default, but updated for our new directory and domain name:
Paste the below (replace your domain)

"
upstream jenkins{
    server 127.0.0.1:8080;
}

server{
    listen      80;
    server_name jenkins.dev.dman.cloud;

    access_log  /var/log/nginx/jenkins.access.log;
    error_log   /var/log/nginx/jenkins.error.log;

    proxy_buffers 16 64k;
    proxy_buffer_size 128k;

    location / {
        proxy_pass  http://jenkins;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_redirect off;

        proxy_set_header    Host            $host;
        proxy_set_header    X-Real-IP       $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto https;
    }

}

"
## Next, let’s enable the file by creating a link from it to the sites-enabled directory, which Nginx reads from during startup:

$ sudo ln -s /etc/nginx/sites-available/example.domain /etc/nginx/sites-enabled/

## Next, test to make sure that there are no syntax errors in any of your Nginx files:
Run from shell prompt

$ sudo nginx -t

If there aren’t any problems, restart Nginx to enable your changes:
Run from shell prompt

$ sudo systemctl restart nginx

% Nginx should now be serving Jenkins from your domain name. You can test this by navigating to http://your_domain


============================================================= Configure Jenkins with SSL Using an Nginx Reverse Proxy¶ =============================================================
By default, Jenkins comes with its own built-in Winstone web server listening on port 8080, which is convenient for getting started. It’s also a good idea, however, to secure Jenkins with SSL to protect passwords and sensitive data transmitted through the web interface.

Prerequsites¶
Jenkins installed
An A record with pointing to your server’s public IP address.

## Update Package Repository and Upgrade Packages¶
Run from shell prompt

$ sudo apt update
$ sudo apt upgrade

## Installing Certbot¶
The first step to using Let’s Encrypt to obtain an SSL certificate is to install the Certbot software on your server.

Run from shell prompt
$ sudo apt install certbot python3-certbot-nginx

## Confirming Nginx’s Configuration¶
Certbot needs to be able to find the correct server block in your Nginx configuration for it to be able to automatically configure SSL. Specifically, it does this by looking for a server_name directive that matches the domain you request a certificate for.

Run from shell prompt (replace domain)

$ sudo vi /etc/nginx/sites-available/example.domain

Find the existing server_name line. It should look like this:
Look for your domain

...
server_name example.domain;
...
If it does, exit your editor and move on to the next step. If not review the installing Nginx Tutorial

## Obtaining an SSL Certificate¶
Certbot provides a variety of ways to obtain SSL certificates through plugins. The Nginx plugin will take care of reconfiguring Nginx and reloading the config whenever necessary. To use this plugin, type the following:

Run from shell prompt (replace domain)

$ sudo certbot --nginx -d example.domain

If that’s successful, certbot will ask how you’d like to configure your HTTPS settings.
## Select your choice then hit ENTER. The configuration will be updated, and Nginx will reload to pick up the new settings. certbot will wrap up with a message telling you the process was successful and where your certificates are stored:

## Verifying Certbot Auto-Renewal¶
Let’s Encrypt’s certificates are only valid for ninety days. This is to encourage users to automate their certificate renewal process. The certbot package we installed takes care of this for us by adding a systemd timer that will run twice a day and automatically renew any certificate that’s within thirty days of expiration.

You can query the status of the timer with systemctl:

Run from shell prompt

$ sudo systemctl status certbot.timer
"
Output
● certbot.timer - Run certbot twice daily
     Loaded: loaded (/lib/systemd/system/certbot.timer; enabled; vendor preset: enabled)
     Active: active (waiting) since Mon 2020-05-04 20:04:36 UTC; 2 weeks 1 days ago
    Trigger: Thu 2020-05-21 05:22:32 UTC; 9h left
   Triggers: ● certbot.service
"
## To test the renewal process, you can do a dry run with certbot:
Run from shell prompt

$ sudo certbot renew --dry-run

## If you see no errors, you’re all set. When necessary, Certbot will renew your certificates and reload Nginx to pick up the changes. If the automated renewal process ever fails, Let’s Encrypt will send a message to the email you specified, warning you when your certificate is about to expire.



============================================================= Install and Configure SonarQube =============================================================
## Update Package Repository and Upgrade Packages
    $ sudo apt update
    $ sudo apt upgrade
## Add PostgresSQL repository
    $ sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    $ wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null
## Install PostgreSQL
    $ sudo apt update
    $ sudo apt-get -y install postgresql postgresql-contrib
    $ sudo systemctl enable postgresql
## Create Database for Sonarqube
    $ sudo passwd postgres
    $ su - postgres
    $ createuser sonar
    $ psql 
    $ ALTER USER sonar WITH ENCRYPTED password 'sonar';
    $ CREATE DATABASE sonarqube OWNER sonar;
    $ grant all privileges on DATABASE sonarqube to sonar;
    $ \q
    $ exit
## Add Adoptium repository
    $ sudo bash
    $ wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
    $ echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
 ## Install Java 17
    $ apt update
    $ apt install temurin-17-jdk
    $ update-alternatives --config java
    $ /usr/bin/java --version
    $ exit 
## Linux Kernel Tuning
   # Increase Limits
    $ sudo vim /etc/security/limits.conf
    //Paste the below values at the bottom of the file
    sonarqube   -   nofile   65536
    sonarqube   -   nproc    4096

    # Increase Mapped Memory Regions
    sudo vim /etc/sysctl.conf
    //Paste the below values at the bottom of the file
    vm.max_map_count = 262144

#### Sonarqube Installation ####
## Download and Extract
    $ sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.0.65466.zip
    $ sudo apt install unzip
    $ sudo unzip sonarqube-9.9.0.65466.zip -d /opt
    $ sudo mv /opt/sonarqube-9.9.0.65466 /opt/sonarqube
## Create user and set permissions
     $ sudo groupadd sonar
     $ sudo useradd -c "user to run SonarQube" -d /opt/sonarqube -g sonar sonar
     $ sudo chown sonar:sonar /opt/sonarqube -R
## Update Sonarqube properties with DB credentials
     $ sudo vim /opt/sonarqube/conf/sonar.properties
     //Find and replace the below values, you might need to add the sonar.jdbc.url
     sonar.jdbc.username=sonar
     sonar.jdbc.password=sonar
     sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube
## Create service for Sonarqube
$ sudo vim /etc/systemd/system/sonar.service
//Paste the below into the file
     [Unit]
     Description=SonarQube service
     After=syslog.target network.target

     [Service]
     Type=forking

     ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
     ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop

     User=sonar
     Group=sonar
     Restart=always

     LimitNOFILE=65536
     LimitNPROC=4096

     [Install]
     WantedBy=multi-user.target

## Start Sonarqube and Enable service
     $ sudo systemctl start sonar
     $ sudo systemctl enable sonar
     $ sudo systemctl status sonar

## Watch log files and monitor for startup
     $ sudo tail -f /opt/sonarqube/logs/sonar.log

============================================================= Setup Bootstrap Server for eksctl and Setup Kubernetes using eksctl =============================================================
## Install AWS Cli on the above EC2
Refer--https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
$ sudo su
$ curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
$ apt install unzip,   $ unzip awscliv2.zip
$ sudo ./aws/install
         OR
$ sudo yum remove -y aws-cli
$ pip3 install --user awscli
$ sudo ln -s $HOME/.local/bin/aws /usr/bin/aws
$ aws --version

## Installing kubectl
Refer--https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html
$ sudo su
$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
$ ll , $ chmod +x ./kubectl  //Gave executable permisions
$ mv kubectl /bin   //Because all our executable files are in /bin
$ kubectl version --output=yaml

## Installing  eksctl
Refer---https://github.com/eksctl-io/eksctl/blob/main/README.md#installation
$ curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
$ cd /tmp
$ ll
$ sudo mv /tmp/eksctl /bin
$ eksctl version

## Setup Kubernetes using eksctl
Refer--https://github.com/aws-samples/eks-workshop/issues/734
$ eksctl create cluster --name virtualtechbox-cluster \
--region ap-south-1 \
--node-type t2.small \
--nodes 3 \

$ kubectl get nodes

============================================================= ArgoCD Installation on EKS Cluster and Add EKS Cluster to ArgoCD =============================================================
1 ) First, create a namespace
    $ kubectl create namespace argocd

2 ) Next, let's apply the yaml configuration files for ArgoCd
    $ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

3 ) Now we can view the pods created in the ArgoCD namespace.
    $ kubectl get pods -n argocd

4 ) To interact with the API Server we need to deploy the CLI:
    $ curl --silent --location -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.4.7/argocd-linux-amd64
    $ chmod +x /usr/local/bin/argocd

5 ) Expose argocd-server
    $ kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

6 ) Wait about 2 minutes for the LoadBalancer creation
    $ kubectl get svc -n argocd

7 ) Get pasword and decode it.
    $ kubectl get secret argocd-initial-admin-secret -n argocd -o yaml
    $ echo WXVpLUg2LWxoWjRkSHFmSA== | base64 --decode

## Add EKS Cluster to ArgoCD
9 ) login to ArgoCD from CLI
    $ argocd login a2255bb2bb33f438d9addf8840d294c5-785887595.ap-south-1.elb.amazonaws.com --username admin

10 ) 
     $ argocd cluster list

11 ) Below command will show the EKS cluster
     $ kubectl config get-contexts

12 ) Add above EKS cluster to ArgoCD with below command
     $ argocd cluster add i-08b9d0ff0409f48e7@virtualtechbox-cluster.ap-south-1.eksctl.io --name virtualtechbox-eks-cluster

13 ) $ kubectl get svc
============================================================= Cleanup =============================================================
$ kubectl get all
$ kubectl delete deployment.apps/virtualtechbox-regapp       //it will delete the deployment
$ kubectl delete service/virtualtechbox-service              //it will delete the service
$ eksctl delete cluster virtualtechbox --region ap-south-1     OR    eksctl delete cluster --region=ap-south-1 --name=virtualtechbox-cluster      //it will delete the EKS cluster
